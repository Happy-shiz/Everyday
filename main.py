import sqlite3
import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
from plyer import notification
import winsound
import threading
import time

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("calendar.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT,
    date TEXT NOT NULL,
    time TEXT NOT NULL,
    category TEXT NOT NULL
)
""")
conn.commit()

# –¶–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_COLORS = {
    "–†–∞–±–æ—Ç–∞": "#ffcc00",
    "–°–µ–º—å—è": "#ff6699",
    "–ó–¥–æ—Ä–æ–≤—å–µ": "#33cc33",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "#3399ff",
    "–û–±—É—á–µ–Ω–∏–µ": "#9933ff",
    "–°–æ–±—ã—Ç–∏—è": "#ff5050"
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def add_event():
    title = title_entry.get()
    description = description_entry.get("1.0", tk.END).strip()
    date = date_entry.get()
    time = time_entry.get()
    category = category_var.get()

    if not title or not date or not time or not category:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
        return

    cursor.execute("INSERT INTO events (title, description, date, time, category) VALUES (?, ?, ?, ?, ?)", 
                   (title, description, date, time, category))
    conn.commit()
    update_monthly_view()
    update_weekly_view()
    update_daily_view()
    clear_inputs()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def delete_event():
    selected_item = event_list.selection()
    if not selected_item:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    event_id = event_list.item(selected_item, "values")[0]
    cursor.execute("DELETE FROM events WHERE id=?", (event_id,))
    conn.commit()
    update_monthly_view()
    update_weekly_view()
    update_daily_view()

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
def clear_inputs():
    title_entry.delete(0, tk.END)
    description_entry.delete("1.0", tk.END)
    date_entry.delete(0, tk.END)
    time_entry.delete(0, tk.END)

# –í—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
def pick_date():
    def set_date():
        date_entry.delete(0, tk.END)
        date_entry.insert(0, cal.get_date())
        top.destroy()

    top = tk.Toplevel(root)
    top.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
    cal = Calendar(top, date_pattern="yyyy-mm-dd")
    cal.pack(pady=20)
    tk.Button(top, text="–í—ã–±—Ä–∞—Ç—å", command=set_date).pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_monthly_view():
    for widget in monthly_frame.winfo_children():
        widget.destroy()

    cursor.execute("SELECT date, title, category FROM events")
    events = cursor.fetchall()

    for event_date, title, category in events:
        label = tk.Label(monthly_frame, text=f"{event_date}: {title}", bg=CATEGORY_COLORS.get(category, "#ffffff"))
        label.pack(anchor="w", padx=5, pady=2)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_weekly_view():
    for widget in weekly_frame.winfo_children():
        widget.destroy()

    cursor.execute("SELECT date, title, category FROM events WHERE date BETWEEN DATE('now', '-7 days') AND DATE('now', '+7 days')")
    events = cursor.fetchall()

    for event_date, title, category in events:
        label = tk.Label(weekly_frame, text=f"{event_date}: {title}", bg=CATEGORY_COLORS.get(category, "#ffffff"))
        label.pack(anchor="w", padx=5, pady=2)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_daily_view():
    for widget in daily_frame.winfo_children():
        widget.destroy()

    cursor.execute("SELECT time, title, category FROM events WHERE date = DATE('now')")
    events = cursor.fetchall()

    for event_time, title, category in events:
        label = tk.Label(daily_frame, text=f"{event_time}: {title}", bg=CATEGORY_COLORS.get(category, "#ffffff"))
        label.pack(anchor="w", padx=5, pady=2)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_notifications():
    while True:
        now = time.strftime("%Y-%m-%d %H:%M")
        cursor.execute("SELECT title FROM events WHERE date || ' ' || time = ?", (now,))
        event = cursor.fetchone()

        if event:
            notification.notify(
                title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                message=f"–°–æ–±—ã—Ç–∏–µ: {event[0]}",
                app_name="–û—Ñ–ª–∞–π–Ω –ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                timeout=10
            )
            winsound.PlaySound("SystemExclamation", winsound.SND_ALIAS)

        time.sleep(30)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
threading.Thread(target=check_notifications, daemon=True).start()

# –°–æ–∑–¥–∞–Ω–∏–µ GUI
root = tk.Tk()
root.title("–û—Ñ–ª–∞–π–Ω –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
root.geometry("800x600")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
sidebar = tk.Frame(root, width=150, bg="#333")
sidebar.pack(side="left", fill="y")

tk.Label(sidebar, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", bg="#333", fg="white").pack(pady=10)
for category, color in CATEGORY_COLORS.items():
    tk.Label(sidebar, text=category, bg=color, fg="black", padx=10).pack(pady=2)

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
notebook = ttk.Notebook(root)
notebook.pack(expand=True, fill="both")

# –í–∫–ª–∞–¥–∫–∏
monthly_frame = tk.Frame(notebook)
weekly_frame = tk.Frame(notebook)
daily_frame = tk.Frame(notebook)

notebook.add(monthly_frame, text="–ú–µ—Å—è—Ü")
notebook.add(weekly_frame, text="–ù–µ–¥–µ–ª—è")
notebook.add(daily_frame, text="–î–µ–Ω—å")

# –ü–æ–ª—è –≤–≤–æ–¥–∞
title_entry = tk.Entry(root)
title_entry.pack()

description_entry = tk.Text(root, height=3)
description_entry.pack()

date_entry = tk.Entry(root)
date_entry.pack()
tk.Button(root, text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", command=pick_date).pack()

time_entry = tk.Entry(root)
time_entry.pack()

category_var = tk.StringVar()
category_dropdown = ttk.Combobox(root, textvariable=category_var, values=list(CATEGORY_COLORS.keys()))
category_dropdown.pack()

tk.Button(root, text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", command=add_event).pack()
tk.Button(root, text="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", command=delete_event).pack()

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–±—ã—Ç–∏–π
columns = ("id", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
event_list = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    event_list.heading(col, text=col)
event_list.pack(fill="both", expand=True)

update_monthly_view()
update_weekly_view()
update_daily_view()

root.mainloop()

conn.close()