import openpyxl
import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import Calendar
from plyer import notification
import winsound
import threading
import time
from datetime import datetime

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Excel —Ñ–∞–π–ª—É
def create_excel():
    try:
        wb = openpyxl.load_workbook("calendar.xlsx")
    except FileNotFoundError:
        wb = openpyxl.Workbook()
        sheet = wb.active
        sheet.title = "–°–æ–±—ã—Ç–∏—è"
        sheet.append(["id", "title", "description", "date", "time", "category"])
        wb.save("calendar.xlsx")
    return wb

wb = create_excel()
sheet = wb["–°–æ–±—ã—Ç–∏—è"]

# –¶–≤–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_COLORS = {
    "–†–∞–±–æ—Ç–∞": "#ffcc00",
    "–°–µ–º—å—è": "#ff6699",
    "–ó–¥–æ—Ä–æ–≤—å–µ": "#33cc33",
    "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "#3399ff",
    "–û–±—É—á–µ–Ω–∏–µ": "#9933ff",
    "–°–æ–±—ã—Ç–∏—è": "#ff5050"
}

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def add_event():
    title = title_entry.get()
    description = description_entry.get("1.0", tk.END).strip()
    date = date_entry.get()
    time = time_entry.get()
    category = category_var.get()

    if not title or not date or not time or not category:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime.date
    try:
        event_date = datetime.strptime(date, "%Y-%m-%d").date()
    except ValueError:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
        return

    # –ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –≤ Excel
    last_row = sheet.max_row + 1
    sheet.append([last_row, title, description, event_date, time, category])
    wb.save("calendar.xlsx")
    
    update_monthly_view()
    update_weekly_view()
    clear_inputs()

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
def delete_event():
    selected_item = event_list.selection()
    if not selected_item:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    event_id = event_list.item(selected_item, "values")[0]

    # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Excel
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
        if row[0].value == int(event_id):
            sheet.delete_rows(row[0].row)
            wb.save("calendar.xlsx")
            break

    update_monthly_view()
    update_weekly_view()

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
def clear_inputs():
    title_entry.delete(0, tk.END)
    description_entry.delete("1.0", tk.END)
    date_entry.delete(0, tk.END)
    time_entry.delete(0, tk.END)

# –í—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
def pick_date():
    def set_date():
        date_entry.delete(0, tk.END)
        date_entry.insert(0, cal.get_date())
        top.destroy()

    top = tk.Toplevel(root)
    top.title("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É")
    cal = Calendar(top, date_pattern="yyyy-mm-dd")
    cal.pack(pady=20)
    tk.Button(top, text="–í—ã–±—Ä–∞—Ç—å", command=set_date).pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_monthly_view():
    for widget in monthly_frame.winfo_children():
        widget.destroy()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    cal = Calendar(monthly_frame, selectmode="day", date_pattern="yyyy-mm-dd", showweeknumbers=False)
    cal.pack(padx=10, pady=10)

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ Excel
    events = {}
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
        event_date, title, category = row[3].value, row[1].value, row[5].value
        
        # –ï—Å–ª–∏ event_date —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º datetime.date, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –µ–≥–æ —Å–Ω–æ–≤–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å
        if isinstance(event_date, datetime):
            event_date = event_date.date()

        if event_date not in events:
            events[event_date] = []
        events[event_date].append(f"{title} ({category})")

    # –ü–æ–º–µ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    for event_date, event_list in events.items():
        for event in event_list:
            cal.calevent_create(event_date, event, tags=("event"))

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def update_weekly_view():
    for widget in weekly_frame.winfo_children():
        widget.destroy()

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ Excel –∑–∞ –Ω–µ–¥–µ–ª—é
    cursor_date = time.strftime("%Y-%m-%d")
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
        event_date, event_time, event_title, event_category = row[3].value, row[4].value, row[1].value, row[5].value
        if event_date == cursor_date:  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Å –¥–∞—Ç–æ–π —Å–æ–±—ã—Ç–∏—è
            event_day = time.strptime(event_date, "%Y-%m-%d").tm_wday  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            event_hour = int(event_time.split(":")[0])  # –ß–∞—Å –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è

            label = tk.Label(weekly_frame, text=event_title, bg=CATEGORY_COLORS.get(event_category, "#ffffff"), height=2, relief="solid")
            label.grid(row=event_hour + 1, column=event_day + 1, sticky="nsew")

    # –ü–æ–¥–≥–æ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —è—á–µ–µ–∫
    for row in range(1, 25):
        weekly_frame.grid_rowconfigure(row, weight=1)
    for col in range(1, 8):
        weekly_frame.grid_columnconfigure(col, weight=1)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_notifications():
    while True:
        now = time.strftime("%Y-%m-%d %H:%M")
        for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
            event_date, event_time, event_title = row[3].value, row[4].value, row[1].value
            if f"{event_date} {event_time}" == now:
                notification.notify(
                    title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                    message=f"–°–æ–±—ã—Ç–∏–µ: {event_title}",
                    app_name="–û—Ñ–ª–∞–π–Ω –ö–∞–ª–µ–Ω–¥–∞—Ä—å",
                    timeout=10
                )
                winsound.PlaySound("SystemExclamation", winsound.SND_ALIAS)

        time.sleep(30)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
threading.Thread(target=check_notifications, daemon=True).start()

# –°–æ–∑–¥–∞–Ω–∏–µ GUI
root = tk.Tk()
root.title("–û—Ñ–ª–∞–π–Ω –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
root.geometry("1000x600")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
sidebar = tk.Frame(root, width=150, bg="#333")
sidebar.pack(side="left", fill="y")

tk.Label(sidebar, text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", bg="#333", fg="white").pack(pady=10)
for category, color in CATEGORY_COLORS.items():
    tk.Label(sidebar, text=category, bg=color, fg="black", padx=10).pack(pady=2)

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
notebook = ttk.Notebook(root)
notebook.pack(expand=True, fill="both")

# –í–∫–ª–∞–¥–∫–∏
monthly_frame = tk.Frame(notebook)
weekly_frame = tk.Frame(notebook)

notebook.add(monthly_frame, text="–ú–µ—Å—è—Ü")
notebook.add(weekly_frame, text="–ù–µ–¥–µ–ª—è")

# –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
title_label = tk.Label(root, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
title_label.pack()
title_entry = tk.Entry(root)
title_entry.pack()

description_label = tk.Label(root, text="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
description_label.pack()
description_entry = tk.Text(root, height=3)
description_entry.pack()

date_label = tk.Label(root, text="–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è:")
date_label.pack()
date_entry = tk.Entry(root)
date_entry.pack()
tk.Button(root, text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", command=pick_date).pack()

time_label = tk.Label(root, text="–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:")
time_label.pack()
time_entry = tk.Entry(root)
time_entry.pack()

category_label = tk.Label(root, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏—è:")
category_label.pack()
category_var = tk.StringVar()
category_dropdown = ttk.Combobox(root, textvariable=category_var, values=list(CATEGORY_COLORS.keys()))
category_dropdown.pack()

tk.Button(root, text="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", command=add_event).pack()
tk.Button(root, text="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", command=delete_event).pack()
update_monthly_view()
update_weekly_view()

root.mainloop()

wb.save("calendar.xlsx")